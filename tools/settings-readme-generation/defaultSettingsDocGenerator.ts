import Handlebars = require("handlebars");
import * as fs from "fs";
import { SettingsManager } from "../../src/services/settingsManager";

// Get the default settings values from settingsManager class
const settingsManager = new SettingsManager(null, null);
const defaultSettings = {
  ansible: settingsManager.defaultSettingsWithDescription,
};

// Convert the nested settings value to single-level object with keys in the form of dotted notations (intermediate step)
const settingsInDotNotation = toDotNotation(defaultSettings);

// Convert the dotted settings value to single-level object with the keys as { settings, defaultValue, description }  (final step)
const arrayOfDefaultSettings = structureSettings(settingsInDotNotation);

// Use handlebars.js to generate doc file with `defaultSettings.handlebars` as template
const templateFile = `${__dirname}/defaultSettings.handlebars`;
const WARNING_IN_README =
  "<!-- {{! Do not edit this file directly. This is generated by the `generate-settings-readme` npm script }} -->";
fs.readFile(templateFile, (err, data) => {
  const template = Handlebars.compile(data.toString());
  const output = template({ arrayOfDefaultSettings });
  fs.writeFileSync(
    `${__dirname}/DEFAULT_SETTINGS.md`,
    `${WARNING_IN_README}\n\n${output}`
  );
});

console.log(
  `Readme file for settings description and default value generated.`
);
console.log(`File: ${__dirname}/DEFAULT_SETTINGS.md`);

export function toDotNotation(obj, res = {}, current = "") {
  for (const key in obj) {
    const value = obj[key];
    const newKey = current ? `${current}.${key}` : key; // joined key with dot
    if (value && typeof value === "object") {
      toDotNotation(value, res, newKey); // it's a nested object, so do it again
    } else {
      res[newKey] = value; // it's not an object, so set the property
    }
  }
  return res;
}

export function structureSettings(settingsInDotNotation) {
  // Form an appropriate structure so that it is easier to iterate over it in the template
  // Structure is as follows:
  // arrayOfDefaultSettings: [
  //   {
  //     key: ansible.first.settings,
  //     defaultValue: some-values,
  //     description: 'description for setting 1'
  //   },
  //   {
  //     key: ansible.second.settings,
  //     defaultValue: another-values,
  //     description: 'description for setting 2'
  //   }
  // ]
  const settingsArray = [];
  for (const k in settingsInDotNotation) {
    const keyArray = k.split(".");
    keyArray.splice(-1, 1);
    const key = keyArray.join(".");

    const obj = {
      setting: key,
      defaultValue: settingsInDotNotation[`${key}.default`],
      description: settingsInDotNotation[`${key}.description`],
    };

    settingsArray.push(obj);
  }
  const uniqueSettings = settingsArray.filter((value, index) => {
    const _value = JSON.stringify(value);
    return (
      index ===
      settingsArray.findIndex((obj) => {
        return JSON.stringify(obj) === _value;
      })
    );
  });

  return uniqueSettings;
}
