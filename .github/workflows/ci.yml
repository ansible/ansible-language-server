---
name: CI

on:
  pull_request:
  push:
  workflow_dispatch:
    inputs:
      release-version:
        # github.event_name == 'workflow_dispatch'
        # && github.event.inputs.release-version
        description: >-
          Target Semver-compliant version to release.
          Please, don't prepend `v`.
        required: true
      release-commitish:
        # github.event_name == 'workflow_dispatch'
        # && github.event.inputs.release-commitish
        default: ''
        description: >-
          The commit to be released to Npmjs and tagged
          in Git as `release-version`. Normally, you
          should keep this empty.
      YOLO:
        default: false
        description: >-
          Flag whether test results should block the
          release (true/false). Only use this under
          extraordinary circumstances to ignore the
          test failures and cut the release regardless.

concurrency:
  group: >-
    ${{
        github.workflow
    }}-${{
        github.event.pull_request.number || github.sha
    }}
  cancel-in-progress: true

jobs:

  pre-setup:
    name: Set up build mode
    runs-on: Ubuntu-latest
    defaults:
      run:
        shell: python
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
    outputs:
      dist-version: >-
        ${{
            steps.request-check.outputs.release-requested == 'true'
            && github.event.inputs.release-version
            || steps.scm-version.outputs.dist-version
        }}
      dist-public-version: >-
        ${{
            steps.request-check.outputs.release-requested == 'true'
            && github.event.inputs.release-version
            || steps.scm-version.outputs.dist-public-version
        }}
      is-untagged-devel: >-
        ${{ steps.untagged-check.outputs.is-untagged-devel || false }}
      release-requested: >-
        ${{
            steps.request-check.outputs.release-requested || false
        }}
      git-tag: ${{ steps.git-tag.outputs.tag }}
      tarball-artifact-name: ${{ steps.artifact-name.outputs.filename }}
      version-patch-name: ${{ steps.patch-name.outputs.filename }}
    steps:
    - name: Switch to using Python 3.10 by default
      uses: actions/setup-python@v2.2.2
      with:
        python-version: '3.10'
    - name: >-
        Mark the build as untagged '${{
            github.event.repository.default_branch
        }}' branch build
      id: untagged-check
      if: >-
        github.event_name == 'push' &&
        github.ref == format(
          'refs/heads/{0}', github.event.repository.default_branch
        )
      run: >-
        print('::set-output name=is-untagged-devel::true')
    - name: Mark the build as "release request"
      id: request-check
      if: github.event_name == 'workflow_dispatch'
      run: >-
        print('::set-output name=release-requested::true')
    - name: Check out src from Git
      if: >-
        steps.request-check.outputs.release-requested != 'true'
      uses: actions/checkout@v2.3.4
      with:
        fetch-depth: 0  # To have all the tags
        ref: ${{ github.event.inputs.release-commitish }}
    - name: Drop Git tags from HEAD for non-tag-create events
      if: >-
        steps.request-check.outputs.release-requested != 'true'
      run: >-
        git tag --points-at HEAD
        |
        xargs git tag --delete
      shell: bash
    - name: Set up versioning prerequisites
      if: >-
        steps.request-check.outputs.release-requested != 'true'
      run: |
        python -m pip install --user --upgrade pip
        python -m pip install --user dunamai
      shell: bash
    - name: Set the current dist version
      if: steps.request-check.outputs.release-requested != 'true'
      id: scm-version
      run: |
        import dunamai
        scm_ver = dunamai.Version.from_git()
        ver = scm_ver.serialize(style=dunamai.Style.SemVer)
        ver_no_local = scm_ver.serialize(
            metadata=False,
            style=dunamai.Style.SemVer,
        )
        print(f'::set-output name=dist-version::{ver}')
        print(f'::set-output name=dist-public-version::{ver_no_local}')
    - name: Set the target Git tag
      id: git-tag
      run: >-
        print('::set-output name=tag::v${{
            steps.request-check.outputs.release-requested == 'true'
            && github.event.inputs.release-version
            || steps.scm-version.outputs.dist-version
        }}')
    - name: Set the expected tarball artifact name
      id: artifact-name
      run: |
        print('::set-output name=filename::ansible-ansible-language-server-${{
            steps.request-check.outputs.release-requested == 'true'
            && github.event.inputs.release-version
            || steps.scm-version.outputs.dist-public-version
        }}.tgz')
    - name: Set the expected version patch filename
      id: patch-name
      run: |
        print('::set-output name=filename::0001-Release-${{
            steps.request-check.outputs.release-requested == 'true'
            && github.event.inputs.release-version
            || steps.scm-version.outputs.dist-public-version
        }}-from-GitHub-Actions-CI-CD.patch')

  lint:
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
    runs-on: Ubuntu-latest
    steps:
    - name: Fetch the src snapshot
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        ref: ${{ github.event.inputs.release-commitish }}
    - name: Setup node
      uses: actions/setup-node@v2
    - name: Install dependencies
      run: |
        python -m pip install --user --upgrade pip
        python -m pip install -r test-requirements.txt
        npm ci
    - name: npm run lint
      run: npm run lint

  build:
    name: Build ${{ needs.pre-setup.outputs.git-tag }}
    needs:
    - pre-setup  # transitive, for accessing settings

    runs-on: Ubuntu-latest

    steps:
    - name: Fetch the src snapshot
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        ref: ${{ github.event.inputs.release-commitish }}
    - name: Setup git user as [bot]
      # Refs:
      # * https://github.community/t/github-actions-bot-email-address/17204/6
      # * https://github.com/actions/checkout/issues/13#issuecomment-724415212
      uses: fregante/setup-git-user@v1.0.1
    - name: >-
        Set up NodeJS ${{ matrix.node-version }}
        with the global NPM registry
      uses: actions/setup-node@v2

    - name: >-
        Bump the package version to ${{
          needs.pre-setup.outputs.dist-version
        }}
      run: >-
        npm version '${{ needs.pre-setup.outputs.dist-version }}'
        -m 'Release %s from GitHub Actions CI/CD'
    - name: Log how the metadata has unchanged
      run: git show --color=always
    - name: Create a version bump patch from the last Git commit
      run: git format-patch -1 HEAD
    - name: Verify that expected patch got created
      run: ls -1 ${{ needs.pre-setup.outputs.version-patch-name }}
    - name: Save the package bump patch as a GHA artifact
      uses: actions/upload-artifact@v2
      with:
        name: npm-package-bump-patch
        path: ${{ needs.pre-setup.outputs.version-patch-name }}

    - name: Build a package tarball artifact
      run: npm pack

    - name: Save the package tarball as a GHA artifact
      uses: actions/upload-artifact@v2
      with:
        name: npm-package-tarball
        path: ${{ needs.pre-setup.outputs.tarball-artifact-name }}

  docs:
    name: ðŸ“š ${{ matrix.toxenv }}

    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os:
        - Ubuntu
        python-version:
        - >-
          3.10
        toxenv:
        - build-docs
        - linkcheck-docs
        - spellcheck-docs
      fail-fast: false

    env:
      PY_COLORS: 1
      TOX_PARALLEL_NO_SPINNER: 1
      TOXENV: ${{ matrix.toxenv }}

    steps:
    - name: >-
        Switch to using Python v${{ matrix.python-version }}
        by default
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: >-
        Calculate Python interpreter version hash value
        for use in the cache key
      id: calc-cache-key-py
      run: |
        from hashlib import sha512
        from sys import version

        hash = sha512(version.encode()).hexdigest()
        print(f'::set-output name=py-hash-key::{hash}')
      shell: python
    - name: Get pip cache dir
      id: pip-cache
      run: >-
        echo "::set-output name=dir::$(pip cache dir)"
    - name: Set up pip cache
      uses: actions/cache@v2.1.7
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: >-
          ${{ runner.os }}-pip-${{
          steps.calc-cache-key-py.outputs.py-hash-key }}-${{
          hashFiles('tox.ini', 'docs/requirements.*') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{
              steps.calc-cache-key-py.outputs.py-hash-key
          }}-
          ${{ runner.os }}-pip-
    - name: Install tox
      run: >-
        python -m
        pip install
        --user
        tox

    - name: Grab the source from Git
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.release-commitish }}

    - name: >-
        Pre-populate tox envs: `${{ env.TOXENV }}`
      run: >-
        python -m
        tox
        --parallel auto
        --parallel-live
        --skip-missing-interpreters false
        --notest
    - name: >-
        Run tox envs: `${{ env.TOXENV }}`
      run: >-
        python -m
        tox
        --parallel auto
        --parallel-live
        --skip-missing-interpreters false
        --skip-pkg-install

  # vscode:
  #   uses: .github/workflows/vscode.yml@main

  test:
    needs:
    - build
    - pre-setup  # transitive, for accessing settings

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
        # linux
        - name: test-node12-linux
          node-version: 12
          os: ubuntu-latest
        - name: test-node14-linux
          node-version: 14
          os: ubuntu-latest
        - name: test-node16-linux
          node-version: 16
          os: ubuntu-latest
        # macos
        - name: test-node12-macos
          node-version: 12
          os: macos-11
        - name: test-node14-macos
          node-version: 14
          os: macos-11
        - name: test-node16-macos
          node-version: 16
          os: macos-11
        # windows
        - name: test-node12-windows
          node-version: 12
          os: windows-latest
        - name: test-node16-windows
          node-version: 16
          os: windows-latest

    continue-on-error: >-
      ${{
          (
            (
              needs.pre-setup.outputs.release-requested == 'true' &&
              !toJSON(github.event.inputs.YOLO)
            ) ||
            matrix.experimental
          ) && true || false
      }}

    steps:
    - name: Fetch the GHA artifact with the package tarball
      uses: actions/download-artifact@v2
      with:
        name: npm-package-tarball
    - name: >-
        Set up NodeJS ${{ matrix.node-version }}
        with the global NPM registry
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        registry-url: https://registry.npmjs.org
    - name: >-
        Install the `${{
          needs.pre-setup.outputs.tarball-artifact-name
        }}` package
      run: npm install -g ${{ needs.pre-setup.outputs.tarball-artifact-name }}
      shell: bash
    - name: Uninstall the `@ansible/ansible-language-server` package
      run: npm uninstall -g @ansible/ansible-language-server
      shell: bash

    - name: Clean up the checkout
      run: rm -rfv *
      shell: bash

    - name: Fetch the src snapshot
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        ref: ${{ github.event.inputs.release-commitish }}
    - name: Setup git user as [bot]
      # Refs:
      # * https://github.community/t/github-actions-bot-email-address/17204/6
      # * https://github.com/actions/checkout/issues/13#issuecomment-724415212
      uses: fregante/setup-git-user@v1.0.1
    - name: Fetch the GHA artifact with the version patch
      uses: actions/download-artifact@v2
      with:
        name: npm-package-bump-patch

    - name: Apply the version patch
      run: git am ${{ needs.pre-setup.outputs.version-patch-name }}
    - name: Drop the version patch file
      run: rm -fv ${{ needs.pre-setup.outputs.version-patch-name }}
      shell: bash

    - name: Switch to using Python 3.10 by default
      uses: actions/setup-python@v2.2.2
      with:
        python-version: '3.10'
    - name: Install test dependencies
      run: |
        python -m pip install --user --upgrade pip
        python -m pip install --user ansible-core ansible-lint
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        # https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#adding-a-system-path
        npm ci
    - name: Run testing against the Git checkout
      run: |
        ansible-lint --version
        npm test

    - name: Produce coverage report
      run: npm run coverage
    - name: Upload coverage data
      uses: codecov/codecov-action@v2
      with:
        name: ${{ matrix.name }}
        files: out/coverage.lcov
        flags: >-
          GHA,
          ${{ runner.os }},
          ${{ matrix.os }},
          ${{ matrix.node-version }}

  check:  # This job does nothing and is only used for the branch protection
    if: always()

    needs:
    - docs
    - lint
    - test
    # - vscode

    runs-on: Ubuntu-latest

    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}

  publish-npmjs:
    name: Publish ${{ needs.pre-setup.outputs.git-tag }} to Npmjs
    if: fromJSON(needs.pre-setup.outputs.release-requested)
    environment:
      name: release
      url: >-
        https://www.npmjs.com/package/@ansible/ansible-language-server/v/${{
          needs.pre-setup.outputs.dist-public-version
        }}
    needs:
    - check
    - pre-setup  # transitive, for accessing settings

    runs-on: Ubuntu-latest

    steps:
    - name: Fetch the GHA artifact with the package tarball
      uses: actions/download-artifact@v2
      with:
        name: npm-package-tarball

    - name: >-
        Set up NodeJS ${{ matrix.node-version }}
        with the global NPM registry
      uses: actions/setup-node@v2
      with:
        registry-url: https://registry.npmjs.org

    - name: >-
        Publish the prebuilt and tested package
        `${{ needs.pre-setup.outputs.tarball-artifact-name }}`
        to public NPM Registry
      run: >-
        npm publish
        --access public
        ${{ needs.pre-setup.outputs.tarball-artifact-name }}
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-ghpnr:
    name: Publish ${{ needs.pre-setup.outputs.git-tag }} to GHPNR
    if: >-
      fromJSON(needs.pre-setup.outputs.is-untagged-devel) ||
      fromJSON(needs.pre-setup.outputs.release-requested)
    needs:
    - check
    - pre-setup  # transitive, for accessing settings
    permissions:
      contents: read
      packages: write

    runs-on: Ubuntu-latest

    steps:
    - name: Fetch the GHA artifact with the package tarball
      uses: actions/download-artifact@v2
      with:
        name: npm-package-tarball

    - name: Set up NodeJS with the GitHub Packages NPM registry
      uses: actions/setup-node@v2
      with:
        registry-url: https://npm.pkg.github.com

    - name: >-
        Publish the prebuilt and tested package
        `${{ needs.pre-setup.outputs.tarball-artifact-name }}`
        to GitHub Packages NPM Registry
      run: >-
        npm publish
        --access public
        ${{ needs.pre-setup.outputs.tarball-artifact-name }}
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-release-repo-update:
    name: Publish post-release meta for ${{ needs.pre-setup.outputs.git-tag }}
    needs:
    - pre-setup  # transitive, for accessing settings
    - publish-npmjs

    runs-on: Ubuntu-latest

    steps:
    - name: Fetch the src
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # To reach the common commit w/ the repo default branch
        ref: ${{ github.event.inputs.release-commitish }}
    - name: Setup git user as [bot]
      # Refs:
      # * https://github.community/t/github-actions-bot-email-address/17204/6
      # * https://github.com/actions/checkout/issues/13#issuecomment-724415212
      uses: fregante/setup-git-user@v1.0.1
    - name: Fetch the GHA artifact with the version patch
      uses: actions/download-artifact@v2
      with:
        name: npm-package-bump-patch

    - name: Apply the version patch
      run: git am ${{ needs.pre-setup.outputs.version-patch-name }}
    - name: Drop the version patch file
      run: rm -fv ${{ needs.pre-setup.outputs.version-patch-name }}

    - name: Create a merge commit with the release branch
      run: |
        sh -x

        git checkout -b 'release/${{
          needs.pre-setup.outputs.dist-version
        }}'

        git fetch origin '+refs/heads/${{
            github.event.repository.default_branch
        }}:refs/remotes/origin/${{
            github.event.repository.default_branch
        }}'

        git checkout '${{ github.event.repository.default_branch }}'

        git merge --no-ff -m "Merge branch 'release/${{
          needs.pre-setup.outputs.dist-version
        }}' into ${{
          github.event.repository.default_branch
        }}" 'release/${{
          needs.pre-setup.outputs.dist-version
        }}'

        git checkout -B 'release/${{
          needs.pre-setup.outputs.dist-version
        }}'

    - name: >-
        Tag the release in the local Git repo
        as ${{ needs.pre-setup.outputs.git-tag }}
      run: git tag ${{ needs.pre-setup.outputs.git-tag }} HEAD
    - name: >-
        Push the `${{ needs.pre-setup.outputs.git-tag }}` tag and
        the `release/${{
            needs.pre-setup.outputs.dist-version
        }}` release branch corresponding to the just published
        release back to GitHub
      run: >-
        git push --atomic origin
        '${{ needs.pre-setup.outputs.git-tag }}'
        'release/${{ needs.pre-setup.outputs.dist-version }}'

  github-release-pull-request:
    name: >-
      Open a GitHub Pull Request for
      ${{ needs.pre-setup.outputs.git-tag }}
    needs:
    - post-release-repo-update
    - pre-setup  # transitive, for accessing settings
    runs-on: Ubuntu-latest

    permissions:
      pull-requests: write

    steps:
    - name: pull-request-action
      id: pr
      uses: vsoch/pull-request-action@1.0.18
      env:
        BRANCH_PREFIX: ''
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PULL_REQUEST_BODY: >-
          Automated metadata update with the just released version
          ${{ needs.pre-setup.outputs.dist-version }}
        PULL_REQUEST_BRANCH: ${{ github.event.repository.default_branch }}
        PULL_REQUEST_FROM_BRANCH: >-
          release/${{ needs.pre-setup.outputs.dist-version }}
        PULL_REQUEST_TITLE: >-
          Bump version to ${{ needs.pre-setup.outputs.git-tag }}
    - name: Log the pull request details
      run: >-
        echo
        "PR number: ${{ steps.pr.outputs.pull_request_number }}"
        "\nPR URL: ${{ steps.pr.outputs.pull_request_url }}"

  publish-github-release:
    name: >-
      Publish a GitHub Release for
      ${{ needs.pre-setup.outputs.git-tag }}
    needs:
    - post-release-repo-update
    - pre-setup  # transitive, for accessing settings
    runs-on: Ubuntu-latest

    permissions:
      contents: write
      discussions: write

    steps:
    - name: Fetch the GHA artifact with the package tarball
      uses: actions/download-artifact@v2
      with:
        name: npm-package-tarball

    - name: >-
        Publish a GitHub Release for
        ${{ needs.pre-setup.outputs.git-tag }}
      uses: ncipollo/release-action@v1.8.10
      with:
        allowUpdates: false
        artifactErrorsFailBuild: false
        artifacts: |
          ${{ needs.pre-setup.outputs.tarball-artifact-name }}
        artifactContentType: application/gzip  # .tgz / RFC 6713
        # body/bodyFile:  # FIXME: Use once Towncrier is integrated.
        commit: release/${{ needs.pre-setup.outputs.dist-version }}
        discussionCategory: Announcements
        draft: false
        name: ${{ needs.pre-setup.outputs.git-tag }}
        # omitBody: false
        omitBodyDuringUpdate: true
        omitName: false
        omitNameDuringUpdate: true
        omitPrereleaseDuringUpdate: true
        prerelease: false
        removeArtifacts: false
        replacesArtifacts: false
        tag: ${{ needs.pre-setup.outputs.git-tag }}
        token: ${{ secrets.GITHUB_TOKEN }}
...
